"use strict";
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var page_1 = require("ui/page");
require("rxjs/add/operator/take");
var store_1 = require('@ngrx/store');
var user_1 = require("../../share/user");
var dialogs = require("ui/dialogs");
var view = require("ui/core/view");
var Toast = require("nativescript-toast");
var fetchModule = require("fetch");
var appSettings = require("application-settings");
var SignUpComponent = (function () {
    function SignUpComponent(router, page, store) {
        var _this = this;
        this.router = router;
        this.page = page;
        this.store = store;
        this.isDatePickerVisible = false;
        this.user = new user_1.User();
        this.store$ = this.store.select('dateData');
        this.store$.subscribe(function (s) { return _this.user.ambbgndt = s; });
    }
    SignUpComponent.prototype.ngOnInit = function () {
        // firebase.addOnPushTokenReceivedCallback(
        //   (tokenreal)=> {
        //     console.log(tokenreal);   
        //     this.token = tokenreal;
        //   }
        // )
        this.showLogin = true;
        var firstTextFieldId = this.page.getViewById("firstTextFieldId");
        firstTextFieldId.focus();
    };
    SignUpComponent.prototype.showDatePicker = function () {
        var textFielsBDate = this.page.getViewById("textFieldBDate");
        this.router.navigate(["/datePicker"]);
        setTimeout(function () {
            textFielsBDate.dismissSoftInput();
        }, 100);
    };
    SignUpComponent.prototype.signUp = function () {
        var _this = this;
        this.user.ambno = this.user.ambno.toUpperCase();
        if (!this.user.isTaiwanID()) {
            this.displayActionDialog("請輸入正確的身份證號碼格式");
            return;
        }
        if (!this.user.isValidEmail()) {
            this.displayActionDialog("請輸入有效的電子信箱");
            return;
        }
        if (this.user.ambno === "" || this.user.ambemail === "") {
            this.displayActionDialog("請輸入所有資料");
            return;
        }
        this.showLogin = false;
        this.token = global.loginResponse.tokenid;
        var parsedate = this.user.ambbgndt.toISOString().slice(0, 10).replace(/-/g, "");
        var taiwanDate = Number(parsedate) - 19110000;
        fetchModule.fetch("http://122.146.168.11/AppRegister/api/ApplyforReg/PushCloudNotifyNumber", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ ambno: this.user.ambno, ambbgndt: "0" + taiwanDate, asrtype: "D2", ambemail: this.user.ambemail, ambaddr: this.user.ambaddr, atktokenid: this.token })
        })
            .then(function (response) {
            appSettings.setString("tokenid", _this.token);
            _this.router.navigate(["/login"]);
            var toast = Toast.makeText("稍後寄出密碼通知");
            toast.show();
            _this.showLogin = true;
        }, function (error) {
            console.log(error);
        });
    };
    SignUpComponent.prototype.displayActionDialog = function (msg) {
        var options = {
            message: msg,
            okButtonText: "確定"
        };
        dialogs.alert(options);
    };
    SignUpComponent = __decorate([
        core_1.Component({
            selector: "signUp",
            templateUrl: "pages/signUp/signUp.html",
            styleUrls: ["pages/signUp/signUp.css"],
        }), 
        __metadata('design:paramtypes', [router_1.Router, page_1.Page, store_1.Store])
    ], SignUpComponent);
    return SignUpComponent;
}());
exports.SignUpComponent = SignUpComponent;
//# sourceMappingURL=data:application/json;base64,