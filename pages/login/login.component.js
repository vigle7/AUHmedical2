"use strict";
var core_1 = require("@angular/core");
var router_1 = require("@angular/router");
var page_1 = require("ui/page");
var observable = require("data/observable");
var appSettings = require("application-settings");
var Toast = require("nativescript-toast");
var fetchModule = require("fetch");
var xmlModule = require("xml");
var dialogs = require("ui/dialogs");
var LoginComponent = (function () {
    function LoginComponent(router, page) {
        var _this = this;
        this.router = router;
        this.page = page;
        this.xmlToJsonResult = [];
        this.newPassword = new observable.Observable();
        this.setCheckbox = function () {
            if (_this.signatureCheckBox.nativeElement.checked) {
                appSettings.setString("id", _this.id);
                appSettings.setString("password", _this.password);
                appSettings.setBoolean("checked", true);
            }
            else {
                if (appSettings.getString("id") === undefined || appSettings.getString("password") === undefined && appSettings.getBoolean("checked") !== undefined) {
                    return;
                }
                appSettings.remove("id");
                appSettings.remove("password");
                appSettings.remove("checked");
            }
        };
        this.onEventCallback = function (event) {
            switch (event.eventType) {
                case xmlModule.ParserEventType.Text:
                    var significantText = event.data.trim();
                    if (significantText !== "" && significantText !== undefined) {
                        _this.xmlToJsonResult.push(significantText);
                    }
                    break;
            }
        };
        this.onErrorCallback = function (error) {
            console.log("Error: " + error.message);
        };
    }
    LoginComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.newPassword.set("Password", "");
        this.newPassword.addEventListener(observable.Observable.propertyChangeEvent, function (pcd) {
            _this.showLogin = false;
            var details = {
                'member_id': _this.id,
                'newpasswd': pcd.value.toString(),
                'hospno': 22,
                'WSPassword': 'appmobile_cmuh',
                'WSuserid': 'cmuh_appmobile',
            };
            var formBody = [];
            for (var property in details) {
                var encodedKey = encodeURIComponent(property);
                var encodedValue = encodeURIComponent(details[property]);
                formBody.push(encodedKey + "=" + encodedValue);
            }
            var bodyString = formBody.join("&");
            fetchModule.fetch("http://122.146.168.11/AppWebService/AppService.asmx/ModifyAppMemberPassWord", {
                method: "POST",
                headers: { "Content-Type": "application/x-www-form-urlencoded" },
                body: bodyString
            }).then(function (response) {
                _this.showLogin = true;
                var toast = Toast.makeText("更新密碼成功");
                toast.show();
                _this.password = pcd.value.toString();
                _this.router.navigate(["/menu"]);
                global.loginResponse.authResult = _this.xmlToJsonResult[0];
                global.loginResponse.accountName = _this.xmlToJsonResult[1];
                global.loginResponse.familyMember = _this.xmlToJsonResult[2];
                global.loginResponse.accoutMemberNo = _this.xmlToJsonResult[3];
                global.loginResponse.member_id = _this.id;
                global.loginResponse.member_passwd = _this.password;
                _this.setCheckbox();
            }, function (error) {
                _this.showLogin = true;
                console.log(error);
                var toast = Toast.makeText("更新密碼失敗");
                toast.show();
            });
        });
        if (appSettings.getString("id") !== undefined && appSettings.getString("password") !== undefined && appSettings.getBoolean("checked") !== undefined) {
            this.id = appSettings.getString("id");
            this.password = appSettings.getString("password");
            this.signatureCheckBox.nativeElement.checked = appSettings.getBoolean("checked");
        }
        this.showLogin = true;
    };
    LoginComponent.prototype.login = function () {
        var _this = this;
        this.showLogin = false;
        this.xmlToJsonResult = [];
        var details = {
            'member_id': this.id,
            'member_passwd': this.password,
            'hospno': 22,
            'tokentype': 'D2',
            'WSPassword': 'appmobile_cmuh',
            'WSuserid': 'cmuh_appmobile',
            'tokenid': global.loginResponse.tokenid
        };
        var formBody = [];
        for (var property in details) {
            var encodedKey = encodeURIComponent(property);
            var encodedValue = encodeURIComponent(details[property]);
            formBody.push(encodedKey + "=" + encodedValue);
        }
        var bodyString = formBody.join("&");
        //fetch("http://122.146.168.11/AppWebService/AppService.asmx/ChkAppMemberPassWord"
        //第一個回傳
        //    0:失敗，密碼錯誤或非會員或為停用
        //    1:成功，且密碼不需更改
        //    2:成功，且密碼需重新修改(第一次使用或六個月需重設密碼)                
        //第二個回傳 陳先生 許小姐
        //1031217先保留email 先傳是否為社區醫學部的醫療群病患,如果是則回傳1,其餘皆視為非
        //第三個回傳 亞大帳號 email
        //第四個回傳 病歷號
        fetchModule.fetch("http://122.146.168.11/AppWebService/AppService.asmx/ChkAppMemberPassWord", {
            method: "POST",
            headers: { "Content-Type": "application/x-www-form-urlencoded" },
            body: bodyString
        }).then(function (response) {
            //console.log(response._bodyText);
            //this.result = [];
            _this.showLogin = true;
            var xmlParser = new xmlModule.XmlParser(_this.onEventCallback, _this.onErrorCallback, true);
            xmlParser.parse(response._bodyText);
            if (_this.xmlToJsonResult[0] === "2") {
                var toast = Toast.makeText("請更新密碼");
                toast.show();
                dialogs.prompt({
                    title: "密碼變更",
                    message: "請輸入新密碼",
                    okButtonText: "確定",
                    neutralButtonText: "取消",
                    defaultText: "",
                    inputType: dialogs.inputType.password
                }).then(function (r) {
                    if (r.result === undefined) {
                        return;
                    }
                    _this.newPassword.set("Password", r.text);
                });
            }
            if (_this.xmlToJsonResult[0] === "1") {
                var toast = Toast.makeText("登入成功");
                toast.show();
                _this.router.navigate(["/menu"]);
                global.loginResponse.authResult = _this.xmlToJsonResult[0];
                global.loginResponse.accountName = _this.xmlToJsonResult[1];
                global.loginResponse.familyMember = _this.xmlToJsonResult[2];
                global.loginResponse.accoutMemberNo = _this.xmlToJsonResult[3];
                global.loginResponse.member_id = _this.id;
                global.loginResponse.member_passwd = _this.password;
                _this.setCheckbox();
            }
            if (_this.xmlToJsonResult[0] === "0") {
                var toast = Toast.makeText("登入失敗");
                toast.show();
                global.loginResponse.authResult = _this.xmlToJsonResult[0];
                return;
            }
        }, function (error) {
            _this.showLogin = true;
            console.log(error);
        });
    };
    __decorate([
        core_1.ViewChild("CB"), 
        __metadata('design:type', core_1.ElementRef)
    ], LoginComponent.prototype, "signatureCheckBox", void 0);
    LoginComponent = __decorate([
        core_1.Component({
            selector: "login",
            templateUrl: "pages/login/login.html",
            styleUrls: ["pages/login/login-common.css", "pages/login/login.css"],
        }), 
        __metadata('design:paramtypes', [router_1.Router, page_1.Page])
    ], LoginComponent);
    return LoginComponent;
}());
exports.LoginComponent = LoginComponent;
//# sourceMappingURL=data:application/json;base64,