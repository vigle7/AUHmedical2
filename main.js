"use strict";
var platform_1 = require("nativescript-angular/platform");
var app_module_1 = require("./app.module");
var LocalNotifications = require("nativescript-local-notifications");
var firebase = require("nativescript-plugin-firebase");
var Toast = require("nativescript-toast");
var dialogs = require("ui/dialogs");
firebase.init({
    onMessageReceivedCallback: function (message) {
        if (message.title === null || message.title === undefined || message.title === "") {
            return;
        }
        LocalNotifications.hasPermission().then(function (granted) {
            if (!granted) {
                return LocalNotifications.requestPermission();
            }
            else {
                dialogs.alert({
                    message: message.body + "\n\n (訊息保留於上方通知列)",
                    okButtonText: "確定"
                });
                LocalNotifications.schedule([{
                        title: message.title,
                        body: message.body,
                        sound: null,
                    }]).then(function () {
                    console.log("Notification scheduled");
                }, function (error) {
                    console.log("scheduling error: " + error);
                });
                return Promise.resolve(true);
            }
        }).then(function (granted) {
            if (!granted) {
                var toast = Toast.makeText("通知權限請至設定開啟", "long");
                toast.show();
            }
        });
    }
});
global.loginResponse = {
    'authResult': '0',
    'accountName': '',
    'familyMember': '',
    'accoutMemberNo': '',
};
//setStatusBarColors();
platform_1.platformNativeScriptDynamic({ startPageActionBarHidden: false }).bootstrapModule(app_module_1.AppModule);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHlCQUE0QywrQkFBK0IsQ0FBQyxDQUFBO0FBRTVFLDJCQUEwQixjQUFjLENBQUMsQ0FBQTtBQUN6QyxJQUFZLGtCQUFrQixXQUFNLGtDQUFrQyxDQUFDLENBQUE7QUFFdkUsSUFBTyxRQUFRLFdBQVcsOEJBQThCLENBQUMsQ0FBQztBQUMxRCxJQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUM1QyxJQUFZLE9BQU8sV0FBTSxZQUFZLENBQUMsQ0FBQTtBQUlwQyxRQUFRLENBQUMsSUFBSSxDQUFDO0lBQ1oseUJBQXlCLEVBQUUsVUFBUyxPQUFPO1FBRXpDLEVBQUUsQ0FBQSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEtBQUcsSUFBSSxJQUFJLE9BQU8sQ0FBQyxLQUFLLEtBQUcsU0FBUyxJQUFJLE9BQU8sQ0FBQyxLQUFLLEtBQUcsRUFBRSxDQUFDLENBQUEsQ0FBQztZQUMxRSxNQUFNLENBQUE7UUFDUixDQUFDO1FBRUssa0JBQWtCLENBQUMsYUFBYSxFQUFFLENBQUMsSUFBSSxDQUNuQyxVQUFDLE9BQU87WUFDTixFQUFFLENBQUEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUM7Z0JBQ0wsTUFBTSxDQUFDLGtCQUFrQixDQUFDLGlCQUFpQixFQUFFLENBQUM7WUFDdEQsQ0FBQztZQUFBLElBQUksQ0FBQSxDQUFDO2dCQUVFLE9BQU8sQ0FBQyxLQUFLLENBQUM7b0JBQ1YsT0FBTyxFQUFFLE9BQU8sQ0FBQyxJQUFJLEdBQUMsbUJBQW1CO29CQUN6QyxZQUFZLEVBQUUsSUFBSTtpQkFDckIsQ0FBQyxDQUFDO2dCQUVILGtCQUFrQixDQUFDLFFBQVEsQ0FBQyxDQUFDO3dCQUM3QixLQUFLLEVBQUUsT0FBTyxDQUFDLEtBQUs7d0JBQ3BCLElBQUksRUFBRSxPQUFPLENBQUMsSUFBSTt3QkFDbEIsS0FBSyxFQUFFLElBQUk7cUJBQ1osQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUNKO29CQUNFLE9BQU8sQ0FBQyxHQUFHLENBQUMsd0JBQXdCLENBQUMsQ0FBQztnQkFDeEMsQ0FBQyxFQUNELFVBQVMsS0FBSztvQkFDWixPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixHQUFHLEtBQUssQ0FBQyxDQUFDO2dCQUM1QyxDQUFDLENBQ0osQ0FBQTtnQkFDSCxNQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUNqQyxDQUFDO1FBQ0gsQ0FBQyxDQUNKLENBQUMsSUFBSSxDQUNGLFVBQUMsT0FBTztZQUNOLEVBQUUsQ0FBQSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUEsQ0FBQztnQkFDVCxJQUFJLEtBQUssR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLFlBQVksRUFBRSxNQUFNLENBQUMsQ0FBQztnQkFDakQsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1lBQ2pCLENBQUM7UUFDSCxDQUFDLENBQUMsQ0FBQTtJQUNkLENBQUM7Q0FFRixDQUFDLENBQUM7QUFFSCxNQUFNLENBQUMsYUFBYSxHQUFHO0lBQ0QsWUFBWSxFQUFDLEdBQUc7SUFDaEIsYUFBYSxFQUFDLEVBQUU7SUFDaEIsY0FBYyxFQUFDLEVBQUU7SUFDakIsZ0JBQWdCLEVBQUMsRUFBRTtDQUNwQixDQUFDO0FBR3hCLHVCQUF1QjtBQUN2QixzQ0FBMkIsQ0FBQyxFQUFDLHdCQUF3QixFQUFFLEtBQUssRUFBQyxDQUFDLENBQUMsZUFBZSxDQUFDLHNCQUFTLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBsYXRmb3JtTmF0aXZlU2NyaXB0RHluYW1pYyB9IGZyb20gXCJuYXRpdmVzY3JpcHQtYW5ndWxhci9wbGF0Zm9ybVwiO1xuXG5pbXBvcnQgeyBBcHBNb2R1bGUgfSBmcm9tIFwiLi9hcHAubW9kdWxlXCI7XG5pbXBvcnQgKiBhcyBMb2NhbE5vdGlmaWNhdGlvbnMgZnJvbSBcIm5hdGl2ZXNjcmlwdC1sb2NhbC1ub3RpZmljYXRpb25zXCI7XG5cbmltcG9ydCBmaXJlYmFzZSA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtcGx1Z2luLWZpcmViYXNlXCIpO1xuY29uc3QgVG9hc3QgPSByZXF1aXJlKFwibmF0aXZlc2NyaXB0LXRvYXN0XCIpO1xuaW1wb3J0ICogYXMgZGlhbG9ncyBmcm9tIFwidWkvZGlhbG9nc1wiO1xuXG5cblxuICBmaXJlYmFzZS5pbml0KHsgIC8v5ZyoZm9yZWdyb3VuZOaJjeacg+Wft+ihjCAgYmFja2dvcnVuZOWPquaciemAmuefpeWIl+eahOmAmuefpVxuICAgIG9uTWVzc2FnZVJlY2VpdmVkQ2FsbGJhY2s6IGZ1bmN0aW9uKG1lc3NhZ2UpIHtcblxuICAgICAgaWYobWVzc2FnZS50aXRsZT09PW51bGwgfHwgbWVzc2FnZS50aXRsZT09PXVuZGVmaW5lZCB8fCBtZXNzYWdlLnRpdGxlPT09XCJcIil7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICAgICAgICBMb2NhbE5vdGlmaWNhdGlvbnMuaGFzUGVybWlzc2lvbigpLnRoZW4oXG4gICAgICAgICAgICAgICAgKGdyYW50ZWQpPT57XG4gICAgICAgICAgICAgICAgICBpZighZ3JhbnRlZCl7IC8vYXBwbGXmspLmnInmjqjmkq3mrIrpmZDvvIznmbzlh7roq4vmsYLmrIrpmZDpgJrnn6UgKGFuZHJvaWTmjqjmkq3kuI3pnIDmrIrpmZDmiYDku6VncmFudOS4gOWumuaYr3RydWXvvIzlj6rph53lsI1hcHBsZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIExvY2FsTm90aWZpY2F0aW9ucy5yZXF1ZXN0UGVybWlzc2lvbigpO1xuICAgICAgICAgICAgICAgICAgfWVsc2V7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGlhbG9ncy5hbGVydCh7IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogbWVzc2FnZS5ib2R5K1wiXFxuXFxuICjoqIrmga/kv53nlZnmlrzkuIrmlrnpgJrnn6XliJcpXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBva0J1dHRvblRleHQ6IFwi56K65a6aXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgTG9jYWxOb3RpZmljYXRpb25zLnNjaGVkdWxlKFt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBtZXNzYWdlLnRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBib2R5OiBtZXNzYWdlLmJvZHksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHNvdW5kOiBudWxsLCAvLyBzdXBwcmVzcyB0aGUgZGVmYXVsdCBzb3VuZFxuICAgICAgICAgICAgICAgICAgICAgICAgfV0pLnRoZW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIk5vdGlmaWNhdGlvbiBzY2hlZHVsZWRcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbihlcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJzY2hlZHVsaW5nIGVycm9yOiBcIiArIGVycm9yKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICApLnRoZW4oXG4gICAgICAgICAgICAgICAgKGdyYW50ZWQpPT57XG4gICAgICAgICAgICAgICAgICBpZighZ3JhbnRlZCl7IC8v6KuL5rGC5qyK6ZmQ6KKr5ouSXG4gICAgICAgICAgICAgICAgICAgICAgbGV0IHRvYXN0ID0gVG9hc3QubWFrZVRleHQoXCLpgJrnn6XmrIrpmZDoq4voh7PoqK3lrprplovllZ9cIiwgXCJsb25nXCIpO1xuICAgICAgICAgICAgICAgICAgICAgIHRvYXN0LnNob3coKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KVxuICAgIH1cblxuICB9KTtcblxuICBnbG9iYWwubG9naW5SZXNwb25zZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICdhdXRoUmVzdWx0JzonMCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAnYWNjb3VudE5hbWUnOicnLCAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2ZhbWlseU1lbWJlcic6JycsICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgJ2FjY291dE1lbWJlck5vJzonJywgIC8v6Iul55eF5Lq65Zyo5Lqe5aSn54K655eF5q236Jmf77yM5ZCm5YmH54K66Lqr5YiG6K2J5YmN6Z2i5YqgWFxuICAgICAgICAgICAgICAgICAgICAgIH07XG5cblxuLy9zZXRTdGF0dXNCYXJDb2xvcnMoKTtcbnBsYXRmb3JtTmF0aXZlU2NyaXB0RHluYW1pYyh7c3RhcnRQYWdlQWN0aW9uQmFySGlkZGVuOiBmYWxzZX0pLmJvb3RzdHJhcE1vZHVsZShBcHBNb2R1bGUpOyJdfQ==