"use strict";
var platform_1 = require("nativescript-angular/platform");
var app_module_1 = require("./app.module");
var LocalNotifications = require("nativescript-local-notifications");
var firebase = require("nativescript-plugin-firebase");
var Toast = require("nativescript-toast");
var dialogs = require("ui/dialogs");
var appSettings = require("application-settings");
global.loginResponse = {
    'authResult': '0',
    'accountName': '',
    'familyMember': '',
    'accoutMemberNo': '',
    'member_id': '',
    'member_passwd': '',
    'tokenid': '',
};
firebase.init({
    onPushTokenReceivedCallback: function (token) {
        global.loginResponse.tokenid = token;
    },
    //在foreground才會執行  backgorund只有通知列的通知
    onMessageReceivedCallback: function (message) {
        if (message.title === null || message.title === undefined || message.title === "") {
            return;
        }
        LocalNotifications.hasPermission().then(function (granted) {
            if (!granted) {
                return LocalNotifications.requestPermission();
            }
            else {
                dialogs.alert({
                    message: message.body + "\n\n (訊息保留於上方通知列)",
                    okButtonText: "確定"
                });
                LocalNotifications.schedule([{
                        title: message.title,
                        body: message.body,
                        sound: null,
                    }]).then(function () {
                    console.log("Notification scheduled");
                }, function (error) {
                    console.log("scheduling error: " + error);
                });
                return Promise.resolve(true);
            }
        }).then(function (granted) {
            if (!granted) {
                var toast = Toast.makeText("通知權限請至設定開啟", "long");
                toast.show();
            }
        });
    }
});
// if(appSettings.getString("tokenid")!==undefined){
//   global.loginResponse.tokenid = appSettings.getString("tokenid");
//   alert(global.loginResponse.tokenid);
// }
platform_1.platformNativeScriptDynamic({ startPageActionBarHidden: false }).bootstrapModule(app_module_1.AppModule);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHlCQUE0QywrQkFBK0IsQ0FBQyxDQUFBO0FBRTVFLDJCQUEwQixjQUFjLENBQUMsQ0FBQTtBQUN6QyxJQUFZLGtCQUFrQixXQUFNLGtDQUFrQyxDQUFDLENBQUE7QUFFdkUsSUFBTyxRQUFRLFdBQVcsOEJBQThCLENBQUMsQ0FBQztBQUMxRCxJQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsb0JBQW9CLENBQUMsQ0FBQztBQUM1QyxJQUFZLE9BQU8sV0FBTSxZQUFZLENBQUMsQ0FBQTtBQUN0QyxJQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsc0JBQXNCLENBQUMsQ0FBQztBQUdsRCxNQUFNLENBQUMsYUFBYSxHQUFHO0lBQ0MsWUFBWSxFQUFDLEdBQUc7SUFDaEIsYUFBYSxFQUFDLEVBQUU7SUFDaEIsY0FBYyxFQUFDLEVBQUU7SUFDakIsZ0JBQWdCLEVBQUMsRUFBRTtJQUNuQixXQUFXLEVBQUMsRUFBRTtJQUNkLGVBQWUsRUFBQyxFQUFFO0lBQ2xCLFNBQVMsRUFBQyxFQUFFO0NBQ2QsQ0FBQztBQUV2QixRQUFRLENBQUMsSUFBSSxDQUFDO0lBQ1osMkJBQTJCLEVBQUUsVUFBUyxLQUFLO1FBQ3pDLE1BQU0sQ0FBQyxhQUFhLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztJQUN2QyxDQUFDO0lBQ0QscUNBQXFDO0lBQ3JDLHlCQUF5QixFQUFFLFVBQVMsT0FBTztRQUV6QyxFQUFFLENBQUEsQ0FBQyxPQUFPLENBQUMsS0FBSyxLQUFHLElBQUksSUFBSSxPQUFPLENBQUMsS0FBSyxLQUFHLFNBQVMsSUFBSSxPQUFPLENBQUMsS0FBSyxLQUFHLEVBQUUsQ0FBQyxDQUFBLENBQUM7WUFDMUUsTUFBTSxDQUFBO1FBQ1IsQ0FBQztRQUVLLGtCQUFrQixDQUFDLGFBQWEsRUFBRSxDQUFDLElBQUksQ0FDbkMsVUFBQyxPQUFPO1lBQ04sRUFBRSxDQUFBLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQSxDQUFDO2dCQUNMLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxpQkFBaUIsRUFBRSxDQUFDO1lBQ3RELENBQUM7WUFBQSxJQUFJLENBQUEsQ0FBQztnQkFFRSxPQUFPLENBQUMsS0FBSyxDQUFDO29CQUNWLE9BQU8sRUFBRSxPQUFPLENBQUMsSUFBSSxHQUFDLG1CQUFtQjtvQkFDekMsWUFBWSxFQUFFLElBQUk7aUJBQ3JCLENBQUMsQ0FBQztnQkFFSCxrQkFBa0IsQ0FBQyxRQUFRLENBQUMsQ0FBQzt3QkFDN0IsS0FBSyxFQUFFLE9BQU8sQ0FBQyxLQUFLO3dCQUNwQixJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUk7d0JBQ2xCLEtBQUssRUFBRSxJQUFJO3FCQUNaLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDSjtvQkFDRSxPQUFPLENBQUMsR0FBRyxDQUFDLHdCQUF3QixDQUFDLENBQUM7Z0JBQ3hDLENBQUMsRUFDRCxVQUFTLEtBQUs7b0JBQ1osT0FBTyxDQUFDLEdBQUcsQ0FBQyxvQkFBb0IsR0FBRyxLQUFLLENBQUMsQ0FBQztnQkFDNUMsQ0FBQyxDQUNKLENBQUE7Z0JBQ0gsTUFBTSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDakMsQ0FBQztRQUNILENBQUMsQ0FDSixDQUFDLElBQUksQ0FDRixVQUFDLE9BQU87WUFDTixFQUFFLENBQUEsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFBLENBQUM7Z0JBQ1QsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxZQUFZLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQ2pELEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUNqQixDQUFDO1FBQ0gsQ0FBQyxDQUFDLENBQUE7SUFDZCxDQUFDO0NBRUYsQ0FBQyxDQUFDO0FBR0gsb0RBQW9EO0FBQ3BELHFFQUFxRTtBQUNyRSx5Q0FBeUM7QUFDekMsSUFBSTtBQUVOLHNDQUEyQixDQUFDLEVBQUMsd0JBQXdCLEVBQUUsS0FBSyxFQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsc0JBQVMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGxhdGZvcm1OYXRpdmVTY3JpcHREeW5hbWljIH0gZnJvbSBcIm5hdGl2ZXNjcmlwdC1hbmd1bGFyL3BsYXRmb3JtXCI7XG5cbmltcG9ydCB7IEFwcE1vZHVsZSB9IGZyb20gXCIuL2FwcC5tb2R1bGVcIjtcbmltcG9ydCAqIGFzIExvY2FsTm90aWZpY2F0aW9ucyBmcm9tIFwibmF0aXZlc2NyaXB0LWxvY2FsLW5vdGlmaWNhdGlvbnNcIjtcblxuaW1wb3J0IGZpcmViYXNlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1wbHVnaW4tZmlyZWJhc2VcIik7XG5jb25zdCBUb2FzdCA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtdG9hc3RcIik7XG5pbXBvcnQgKiBhcyBkaWFsb2dzIGZyb20gXCJ1aS9kaWFsb2dzXCI7XG5jb25zdCBhcHBTZXR0aW5ncyA9IHJlcXVpcmUoXCJhcHBsaWNhdGlvbi1zZXR0aW5nc1wiKTtcblxuXG4gIGdsb2JhbC5sb2dpblJlc3BvbnNlID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAnYXV0aFJlc3VsdCc6JzAnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAnYWNjb3VudE5hbWUnOicnLCAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAnZmFtaWx5TWVtYmVyJzonJywgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdhY2NvdXRNZW1iZXJObyc6JycsICAvL+iLpeeXheS6uuWcqOS6nuWkp+eCuueXheatt+iZn++8jOWQpuWJh+eCuui6q+WIhuitieWJjemdouWKoFhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ21lbWJlcl9pZCc6JycsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICdtZW1iZXJfcGFzc3dkJzonJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJ3Rva2VuaWQnOicnLFxuICAgICAgICAgICAgICAgICAgICDjgIAgIH07XG5cbiAgZmlyZWJhc2UuaW5pdCh7ICBcbiAgICBvblB1c2hUb2tlblJlY2VpdmVkQ2FsbGJhY2s6IGZ1bmN0aW9uKHRva2VuKSB7XG4gICAgICBnbG9iYWwubG9naW5SZXNwb25zZS50b2tlbmlkID0gdG9rZW47XG4gICAgfSxcbiAgICAvL+WcqGZvcmVncm91bmTmiY3mnIPln7fooYwgIGJhY2tnb3J1bmTlj6rmnInpgJrnn6XliJfnmoTpgJrnn6VcbiAgICBvbk1lc3NhZ2VSZWNlaXZlZENhbGxiYWNrOiBmdW5jdGlvbihtZXNzYWdlKSB7XG5cbiAgICAgIGlmKG1lc3NhZ2UudGl0bGU9PT1udWxsIHx8IG1lc3NhZ2UudGl0bGU9PT11bmRlZmluZWQgfHwgbWVzc2FnZS50aXRsZT09PVwiXCIpe1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgICAgICAgTG9jYWxOb3RpZmljYXRpb25zLmhhc1Blcm1pc3Npb24oKS50aGVuKFxuICAgICAgICAgICAgICAgIChncmFudGVkKT0+e1xuICAgICAgICAgICAgICAgICAgaWYoIWdyYW50ZWQpeyAvL2FwcGxl5rKS5pyJ5o6o5pKt5qyK6ZmQ77yM55m85Ye66KuL5rGC5qyK6ZmQ6YCa55+lIChhbmRyb2lk5o6o5pKt5LiN6ZyA5qyK6ZmQ5omA5LulZ3JhbnTkuIDlrprmmK90cnVl77yM5Y+q6Yed5bCNYXBwbGUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBMb2NhbE5vdGlmaWNhdGlvbnMucmVxdWVzdFBlcm1pc3Npb24oKTtcbiAgICAgICAgICAgICAgICAgIH1lbHNle1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRpYWxvZ3MuYWxlcnQoeyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UuYm9keStcIlxcblxcbiAo6KiK5oGv5L+d55WZ5pa85LiK5pa56YCa55+l5YiXKVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2tCdXR0b25UZXh0OiBcIueiuuWumlwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIExvY2FsTm90aWZpY2F0aW9ucy5zY2hlZHVsZShbe1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogbWVzc2FnZS50aXRsZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgYm9keTogbWVzc2FnZS5ib2R5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VuZDogbnVsbCwgLy8gc3VwcHJlc3MgdGhlIGRlZmF1bHQgc291bmRcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dKS50aGVuKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJOb3RpZmljYXRpb24gc2NoZWR1bGVkXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwic2NoZWR1bGluZyBlcnJvcjogXCIgKyBlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodHJ1ZSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKS50aGVuKFxuICAgICAgICAgICAgICAgIChncmFudGVkKT0+e1xuICAgICAgICAgICAgICAgICAgaWYoIWdyYW50ZWQpeyAvL+iri+axguasiumZkOiiq+aLklxuICAgICAgICAgICAgICAgICAgICAgIGxldCB0b2FzdCA9IFRvYXN0Lm1ha2VUZXh0KFwi6YCa55+l5qyK6ZmQ6KuL6Iez6Kit5a6a6ZaL5ZWfXCIsIFwibG9uZ1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICB0b2FzdC5zaG93KCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSlcbiAgICB9XG5cbiAgfSk7XG5cblxuICAvLyBpZihhcHBTZXR0aW5ncy5nZXRTdHJpbmcoXCJ0b2tlbmlkXCIpIT09dW5kZWZpbmVkKXtcbiAgLy8gICBnbG9iYWwubG9naW5SZXNwb25zZS50b2tlbmlkID0gYXBwU2V0dGluZ3MuZ2V0U3RyaW5nKFwidG9rZW5pZFwiKTtcbiAgLy8gICBhbGVydChnbG9iYWwubG9naW5SZXNwb25zZS50b2tlbmlkKTtcbiAgLy8gfVxuXG5wbGF0Zm9ybU5hdGl2ZVNjcmlwdER5bmFtaWMoe3N0YXJ0UGFnZUFjdGlvbkJhckhpZGRlbjogZmFsc2V9KS5ib290c3RyYXBNb2R1bGUoQXBwTW9kdWxlKTsiXX0=